// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/jflex/simple.flex

/* this is the scanner example from the JLex website
   (with small modifications to make it more readable) */

package com.ufes.compilador.JFlex;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Yylex {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\1\u0400\266\u0200\10\u0500\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\2\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\0\3\6\1\7\1\0\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\11\21\1\22"+
    "\1\23\1\24\1\25\1\26\2\6\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\40\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\0\1\61\1\0\1\40\1\0\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\40\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\62"+
    "\1\63\1\64\7\0\1\3\252\0\2\65\115\0\1\66"+
    "\u01a8\0\2\3\u0100\0\1\67\325\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\3\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\2\14\1\15\1\16\1\17"+
    "\1\20\1\21\21\22\1\23\1\24\1\0\1\25\2\0"+
    "\1\2\1\26\2\1\1\0\1\27\1\2\1\0\1\30"+
    "\1\31\1\32\11\22\1\33\6\22\1\0\1\22\1\34"+
    "\22\22\1\0\1\2\1\34\7\0\1\35\2\1\2\2"+
    "\1\36\1\37\1\2\2\0\2\40\1\22\1\0\6\22"+
    "\1\0\6\22\1\0\4\22\1\41\1\0\3\22\1\42"+
    "\1\0\2\22\1\43\3\22\1\0\7\22\1\0\3\22"+
    "\1\0\2\22\1\44\2\22\1\0\1\22\2\0\1\42"+
    "\4\0\2\1\1\0\1\22\1\0\2\22\1\45\1\22"+
    "\1\46\1\22\1\46\1\47\1\22\1\0\2\22\1\0"+
    "\2\22\2\50\2\22\1\0\2\22\1\0\1\51\4\22"+
    "\1\0\1\52\1\22\1\0\1\22\1\0\3\22\1\0"+
    "\1\22\1\53\5\22\1\0\1\22\2\54\2\22\1\55"+
    "\1\56\1\22\1\56\1\22\10\0\1\2\1\22\1\0"+
    "\1\22\2\57\1\22\1\60\2\61\1\62\1\22\1\0"+
    "\1\62\3\22\2\63\1\64\1\65\1\64\5\22\2\0"+
    "\1\22\1\0\1\22\1\0\3\22\1\0\1\22\1\0"+
    "\1\22\1\66\1\22\1\0\1\67\1\22\1\0\1\22"+
    "\1\70\1\22\1\0\1\22\2\71\3\0\1\66\1\67"+
    "\1\0\1\22\1\0\3\22\1\0\1\22\1\72\2\22"+
    "\1\0\1\22\1\73\3\22\2\0\2\74\1\22\1\0"+
    "\3\22\1\0\2\75\1\76\2\77\2\100\1\22\2\101"+
    "\1\22\1\0\1\22\2\0\1\73\2\0\1\22\1\0"+
    "\1\102\2\22\1\0\1\103\2\104\2\105\3\22\1\53"+
    "\1\0\2\106\1\107\2\22\1\107\2\22\1\0\1\22"+
    "\4\0\2\110\1\53\2\111\3\22\1\0\1\112\3\22"+
    "\1\0\2\113\3\0\3\22\1\114\1\0\1\115\1\22"+
    "\1\0\2\116\1\0\1\114\2\117\2\120\1\22\1\0"+
    "\1\22\1\0\2\121";

  private static int [] zzUnpackAction() {
    int [] result = new int[417];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\250\0\u0118\0\250"+
    "\0\250\0\250\0\250\0\250\0\250\0\u0150\0\u0188\0\u01c0"+
    "\0\250\0\250\0\u01f8\0\250\0\u0230\0\u0268\0\u02a0\0\u02d8"+
    "\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498"+
    "\0\u04d0\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\250\0\250"+
    "\0\u0620\0\u03f0\0\u0658\0\u0690\0\u06c8\0\u0700\0\u0738\0\u0770"+
    "\0\u07a8\0\250\0\u07e0\0\u0818\0\250\0\250\0\250\0\u0850"+
    "\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u09d8\0\u0a10"+
    "\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0"+
    "\0\u0c08\0\u03f0\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58"+
    "\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18"+
    "\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\u0620\0\250\0\u1068"+
    "\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u1180\0\u11b8\0\u0700\0\u11f0"+
    "\0\u1228\0\u1260\0\u1298\0\u12d0\0\u12d0\0\u1308\0\u1340\0\u1378"+
    "\0\250\0\u13b0\0\u13e8\0\u1420\0\u1458\0\u1490\0\u14c8\0\u1500"+
    "\0\u1538\0\u1570\0\u15a8\0\u15e0\0\u1618\0\u1650\0\u1688\0\u16c0"+
    "\0\u16f8\0\u1730\0\u1768\0\u17a0\0\u17d8\0\u1810\0\u03f0\0\u1848"+
    "\0\u1880\0\u18b8\0\u18f0\0\u1928\0\u1960\0\u1998\0\u19d0\0\u03f0"+
    "\0\u1a08\0\u1a40\0\u1a78\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58\0\u1b90"+
    "\0\u1bc8\0\u1c00\0\u1c38\0\u1c70\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50"+
    "\0\u1d88\0\u1dc0\0\u03f0\0\u1df8\0\u1e30\0\u1e68\0\u1ea0\0\u1ed8"+
    "\0\u1f10\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0\0\u2028\0\u12d0\0\u2060"+
    "\0\u2098\0\u20d0\0\u2108\0\u2140\0\u2178\0\u03f0\0\u21b0\0\u03f0"+
    "\0\u21e8\0\250\0\u03f0\0\u2220\0\u2258\0\u2290\0\u22c8\0\u2300"+
    "\0\u2338\0\u2370\0\u03f0\0\250\0\u23a8\0\u23e0\0\u2418\0\u2450"+
    "\0\u2488\0\u24c0\0\u03f0\0\u24f8\0\u2530\0\u2568\0\u25a0\0\u25d8"+
    "\0\u03f0\0\u2610\0\u2648\0\u2680\0\u26b8\0\u26f0\0\u2728\0\u2760"+
    "\0\u2798\0\u27d0\0\u03f0\0\u2808\0\u2840\0\u2878\0\u28b0\0\u28e8"+
    "\0\u2920\0\u2958\0\u03f0\0\250\0\u2990\0\u29c8\0\u03f0\0\u03f0"+
    "\0\u2a00\0\250\0\u2a38\0\u2a70\0\u2aa8\0\u2ae0\0\u2b18\0\u2b50"+
    "\0\u2b88\0\u2bc0\0\u2bf8\0\u2c30\0\u2c68\0\u2ca0\0\u2cd8\0\u03f0"+
    "\0\250\0\u2d10\0\u03f0\0\u03f0\0\250\0\u03f0\0\u2d48\0\u2d80"+
    "\0\250\0\u2db8\0\u2df0\0\u2e28\0\u03f0\0\250\0\u2e60\0\u03f0"+
    "\0\u2e98\0\u2ed0\0\u2f08\0\u2f40\0\u2f78\0\u2fb0\0\u2fe8\0\u3020"+
    "\0\u3058\0\u3090\0\u30c8\0\u3100\0\u3138\0\u3170\0\u31a8\0\u31e0"+
    "\0\u3218\0\u3250\0\u3288\0\u03f0\0\u32c0\0\u32f8\0\u03f0\0\u3330"+
    "\0\u3368\0\u33a0\0\u33d8\0\u3410\0\u3448\0\u3480\0\u03f0\0\250"+
    "\0\u34b8\0\u34f0\0\u3528\0\250\0\250\0\u3560\0\u3598\0\u35d0"+
    "\0\u3608\0\u3640\0\u3678\0\u36b0\0\u36e8\0\u03f0\0\u3720\0\u3758"+
    "\0\u3790\0\u37c8\0\u03f0\0\u3800\0\u3838\0\u3870\0\u38a8\0\u38e0"+
    "\0\u03f0\0\250\0\u3918\0\u3950\0\u3988\0\u39c0\0\u39f8\0\u3a30"+
    "\0\u03f0\0\250\0\u03f0\0\u03f0\0\250\0\u03f0\0\250\0\u3a68"+
    "\0\u03f0\0\250\0\u3aa0\0\u3ad8\0\u3b10\0\u3b48\0\u3b80\0\250"+
    "\0\u3bb8\0\u3bf0\0\u3c28\0\u3c60\0\u3838\0\u3c98\0\u3cd0\0\u3d08"+
    "\0\u03f0\0\u03f0\0\250\0\u03f0\0\250\0\u3d40\0\u3d78\0\u3db0"+
    "\0\250\0\u3de8\0\u03f0\0\250\0\u03f0\0\u3e20\0\u3e58\0\250"+
    "\0\u3e90\0\u3ec8\0\u3f00\0\u3f38\0\u3f70\0\u3fa8\0\u3fe0\0\u4018"+
    "\0\u03f0\0\250\0\u4050\0\u03f0\0\250\0\u4088\0\u40c0\0\u40f8"+
    "\0\u4130\0\u03f0\0\u4168\0\u41a0\0\u41d8\0\u4210\0\u03f0\0\250"+
    "\0\u4248\0\u4280\0\u42b8\0\u42f0\0\u4328\0\u4360\0\u03f0\0\u4398"+
    "\0\u03f0\0\u43d0\0\u4408\0\u03f0\0\250\0\u4440\0\250\0\u03f0"+
    "\0\250\0\u03f0\0\250\0\u4478\0\u44b0\0\u44e8\0\u4520\0\u03f0"+
    "\0\250";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[417];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\3\1\0\1\4\1\5\1\0\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\2\35"+
    "\1\37\1\35\1\40\1\35\1\41\1\42\1\43\1\44"+
    "\1\35\1\45\1\46\3\35\1\47\1\50\1\51\1\52"+
    "\1\0\1\53\1\54\1\0\2\55\1\56\7\55\1\57"+
    "\4\55\1\60\50\55\1\0\2\3\157\0\1\4\77\0"+
    "\1\61\67\0\1\62\4\0\1\63\50\0\2\64\4\0"+
    "\64\64\4\0\12\64\2\20\46\64\25\0\1\65\1\66"+
    "\66\0\1\67\50\0\1\35\11\0\2\35\5\0\1\35"+
    "\1\70\27\35\3\0\1\35\12\0\1\35\11\0\2\35"+
    "\5\0\16\35\1\71\1\35\1\72\6\35\1\73\1\35"+
    "\3\0\1\35\12\0\1\35\11\0\2\35\5\0\1\74"+
    "\6\35\1\75\3\35\1\76\2\35\1\77\12\35\3\0"+
    "\1\35\12\0\1\35\11\0\2\35\5\0\4\35\1\100"+
    "\11\35\1\101\12\35\3\0\1\35\12\0\1\35\11\0"+
    "\2\35\5\0\13\35\1\102\12\35\1\103\2\35\3\0"+
    "\1\35\12\0\1\35\11\0\2\35\5\0\1\104\7\35"+
    "\1\105\2\35\1\106\2\35\1\107\12\35\3\0\1\35"+
    "\1\0\1\110\10\0\1\35\11\0\2\35\5\0\16\35"+
    "\1\111\12\35\3\0\1\35\12\0\1\35\11\0\2\35"+
    "\5\0\31\35\3\0\1\35\12\0\1\35\11\0\2\35"+
    "\5\0\5\35\1\112\6\35\1\113\1\114\13\35\3\0"+
    "\1\35\12\0\1\35\11\0\2\35\5\0\16\35\1\115"+
    "\12\35\3\0\1\35\12\0\1\35\11\0\2\35\5\0"+
    "\1\116\3\35\1\117\24\35\3\0\1\35\12\0\1\35"+
    "\11\0\2\35\5\0\1\120\17\35\1\121\2\35\1\122"+
    "\5\35\3\0\1\35\12\0\1\35\11\0\2\35\5\0"+
    "\4\35\1\123\24\35\3\0\1\35\12\0\1\35\11\0"+
    "\2\35\5\0\7\35\1\124\12\35\1\125\1\126\1\35"+
    "\1\127\1\35\1\130\1\35\3\0\1\35\12\0\1\35"+
    "\11\0\2\35\5\0\7\35\1\131\10\35\1\132\10\35"+
    "\3\0\1\35\12\0\1\35\11\0\2\35\5\0\16\35"+
    "\1\133\12\35\3\0\1\35\12\0\1\35\11\0\2\35"+
    "\5\0\7\35\1\134\21\35\3\0\1\35\4\0\12\51"+
    "\1\135\51\51\1\136\3\51\34\0\1\137\6\0\1\140"+
    "\1\141\61\0\1\142\12\0\1\143\1\144\1\0\1\145"+
    "\1\0\1\146\11\0\2\55\1\147\7\55\1\150\4\55"+
    "\1\151\50\55\12\147\1\0\55\147\2\152\1\0\7\152"+
    "\1\153\4\152\1\154\50\152\2\55\1\147\7\55\1\155"+
    "\4\55\1\156\50\55\12\157\1\160\55\157\2\63\1\4"+
    "\2\63\1\5\62\63\20\0\1\161\1\162\54\0\1\35"+
    "\11\0\2\35\5\0\21\35\1\163\7\35\3\0\1\35"+
    "\2\0\1\164\7\0\1\35\11\0\2\35\5\0\16\35"+
    "\1\165\12\35\3\0\1\35\12\0\1\35\11\0\2\35"+
    "\5\0\4\35\1\166\24\35\3\0\1\35\12\0\1\35"+
    "\11\0\2\35\5\0\22\35\1\167\6\35\3\0\1\35"+
    "\12\0\1\35\11\0\2\35\5\0\20\35\1\170\1\171"+
    "\1\172\6\35\3\0\1\35\2\0\1\173\7\0\1\35"+
    "\11\0\2\35\5\0\1\174\30\35\3\0\1\35\12\0"+
    "\1\35\11\0\2\35\5\0\1\175\30\35\3\0\1\35"+
    "\12\0\1\35\11\0\2\35\5\0\15\35\1\176\13\35"+
    "\3\0\1\35\12\0\1\35\11\0\2\35\5\0\5\35"+
    "\1\177\23\35\3\0\1\35\12\0\1\35\11\0\2\35"+
    "\5\0\23\35\1\200\5\35\3\0\1\35\12\0\1\35"+
    "\11\0\2\35\5\0\21\35\1\201\7\35\3\0\1\35"+
    "\2\0\1\202\7\0\1\35\11\0\2\35\5\0\22\35"+
    "\1\203\6\35\3\0\1\35\12\0\1\35\11\0\2\35"+
    "\5\0\13\35\1\204\15\35\3\0\1\35\12\0\1\35"+
    "\11\0\2\35\5\0\15\35\1\205\13\35\3\0\1\35"+
    "\12\0\1\35\11\0\2\35\5\0\16\35\1\206\12\35"+
    "\3\0\1\35\12\0\1\35\11\0\2\35\5\0\20\35"+
    "\1\207\10\35\3\0\1\35\50\0\1\210\31\0\1\35"+
    "\11\0\2\35\5\0\22\35\1\211\6\35\3\0\1\35"+
    "\12\0\1\35\11\0\2\35\5\0\17\35\1\212\11\35"+
    "\3\0\1\35\12\0\1\35\11\0\2\35\5\0\21\35"+
    "\1\213\1\214\6\35\3\0\1\35\2\0\1\215\7\0"+
    "\1\35\11\0\2\35\5\0\15\35\1\216\13\35\3\0"+
    "\1\35\12\0\1\35\11\0\2\35\5\0\22\35\1\217"+
    "\6\35\3\0\1\35\12\0\1\35\11\0\2\35\5\0"+
    "\25\35\1\220\3\35\3\0\1\35\12\0\1\35\11\0"+
    "\2\35\5\0\2\35\1\221\26\35\3\0\1\35\12\0"+
    "\1\35\11\0\2\35\5\0\10\35\1\222\5\35\1\223"+
    "\12\35\3\0\1\35\1\0\1\224\10\0\1\35\11\0"+
    "\2\35\5\0\1\35\1\225\27\35\3\0\1\35\12\0"+
    "\1\35\11\0\2\35\5\0\1\226\21\35\1\227\6\35"+
    "\3\0\1\35\12\0\1\35\11\0\2\35\5\0\16\35"+
    "\1\230\12\35\3\0\1\35\12\0\1\35\11\0\2\35"+
    "\5\0\1\231\30\35\3\0\1\35\12\0\1\35\11\0"+
    "\2\35\5\0\17\35\1\232\11\35\3\0\1\35\12\0"+
    "\1\35\11\0\2\35\5\0\10\35\1\233\20\35\3\0"+
    "\1\35\1\0\1\234\10\0\1\35\11\0\2\35\5\0"+
    "\15\35\1\235\13\35\3\0\1\35\12\0\1\35\11\0"+
    "\2\35\5\0\10\35\1\236\7\35\1\237\10\35\3\0"+
    "\1\35\1\0\1\240\10\0\1\35\11\0\2\35\5\0"+
    "\1\241\22\35\1\242\3\35\1\243\1\35\3\0\1\35"+
    "\12\0\1\35\11\0\2\35\5\0\10\35\1\244\2\35"+
    "\1\245\15\35\3\0\1\35\1\0\1\246\10\0\1\35"+
    "\11\0\2\35\5\0\10\35\1\247\20\35\3\0\1\35"+
    "\1\0\1\250\2\0\12\51\1\135\4\51\1\0\50\51"+
    "\46\0\1\251\71\0\1\215\1\252\14\0\1\215\46\0"+
    "\1\253\51\0\1\254\106\0\1\255\60\0\1\234\25\0"+
    "\1\234\46\0\1\256\23\0\2\152\1\0\7\152\1\153"+
    "\4\152\1\257\50\152\2\55\1\147\7\55\1\257\4\55"+
    "\1\156\50\55\2\152\1\0\7\152\1\150\4\152\1\260"+
    "\52\152\1\0\7\152\1\153\4\152\1\260\50\152\2\257"+
    "\1\0\65\257\2\55\1\147\7\55\1\150\4\55\1\156"+
    "\50\55\12\157\1\261\55\157\11\0\1\4\1\160\75\0"+
    "\2\162\54\0\1\35\11\0\2\35\5\0\22\35\1\262"+
    "\6\35\3\0\1\35\55\0\1\263\24\0\1\35\11\0"+
    "\2\35\5\0\13\35\1\264\15\35\3\0\1\35\12\0"+
    "\1\35\11\0\2\35\5\0\1\265\30\35\3\0\1\35"+
    "\12\0\1\35\11\0\2\35\5\0\4\35\1\266\24\35"+
    "\3\0\1\35\12\0\1\35\11\0\2\35\5\0\1\267"+
    "\30\35\3\0\1\35\12\0\1\35\11\0\2\35\5\0"+
    "\4\35\1\270\24\35\3\0\1\35\12\0\1\35\11\0"+
    "\2\35\5\0\2\35\1\271\26\35\3\0\1\35\37\0"+
    "\1\272\42\0\1\35\11\0\2\35\5\0\20\35\1\273"+
    "\10\35\3\0\1\35\12\0\1\35\11\0\2\35\5\0"+
    "\21\35\1\274\7\35\3\0\1\35\2\0\1\275\7\0"+
    "\1\35\11\0\2\35\5\0\21\35\1\276\1\277\6\35"+
    "\3\0\1\35\2\0\1\300\7\0\1\35\11\0\2\35"+
    "\5\0\1\301\30\35\3\0\1\35\12\0\1\35\11\0"+
    "\2\35\5\0\1\35\1\302\27\35\3\0\1\35\12\0"+
    "\1\35\11\0\2\35\5\0\4\35\1\303\24\35\3\0"+
    "\1\35\37\0\1\304\42\0\1\35\11\0\2\35\5\0"+
    "\4\35\1\305\24\35\3\0\1\35\12\0\1\35\11\0"+
    "\2\35\5\0\21\35\1\306\7\35\3\0\1\35\2\0"+
    "\1\307\7\0\1\35\11\0\2\35\5\0\1\310\30\35"+
    "\3\0\1\35\12\0\1\35\11\0\2\35\5\0\1\311"+
    "\30\35\3\0\1\35\33\0\1\312\46\0\1\35\11\0"+
    "\2\35\5\0\16\35\1\313\12\35\3\0\1\35\12\0"+
    "\1\35\11\0\2\35\5\0\13\35\1\314\2\35\1\315"+
    "\12\35\3\0\1\35\12\0\1\35\11\0\2\35\5\0"+
    "\22\35\1\316\6\35\3\0\1\35\12\0\1\35\11\0"+
    "\2\35\5\0\4\35\1\317\24\35\3\0\1\35\55\0"+
    "\1\320\24\0\1\35\11\0\2\35\5\0\6\35\1\321"+
    "\22\35\3\0\1\35\12\0\1\35\11\0\2\35\5\0"+
    "\10\35\1\322\20\35\3\0\1\35\1\0\1\323\10\0"+
    "\1\35\11\0\2\35\5\0\12\35\1\324\16\35\3\0"+
    "\1\35\3\0\1\325\6\0\1\35\11\0\2\35\5\0"+
    "\24\35\1\326\4\35\3\0\1\35\12\0\1\35\11\0"+
    "\2\35\5\0\6\35\1\327\13\35\1\330\6\35\3\0"+
    "\1\35\57\0\1\331\22\0\1\35\11\0\2\35\5\0"+
    "\13\35\1\332\15\35\3\0\1\35\12\0\1\35\11\0"+
    "\2\35\5\0\13\35\1\333\15\35\3\0\1\35\12\0"+
    "\1\35\11\0\2\35\5\0\23\35\1\334\5\35\3\0"+
    "\1\35\12\0\1\35\11\0\2\35\5\0\20\35\1\335"+
    "\10\35\3\0\1\35\12\0\1\35\11\0\2\35\5\0"+
    "\22\35\1\336\6\35\3\0\1\35\12\0\1\35\11\0"+
    "\2\35\5\0\4\35\1\337\24\35\3\0\1\35\12\0"+
    "\1\35\11\0\2\35\5\0\22\35\1\340\6\35\3\0"+
    "\1\35\55\0\1\341\24\0\1\35\11\0\2\35\5\0"+
    "\2\35\1\342\26\35\3\0\1\35\12\0\1\35\11\0"+
    "\2\35\5\0\21\35\1\343\7\35\3\0\1\35\2\0"+
    "\1\344\7\0\1\35\11\0\2\35\5\0\16\35\1\345"+
    "\12\35\3\0\1\35\54\0\1\344\15\0\1\344\7\0"+
    "\1\35\11\0\2\35\5\0\15\35\1\346\13\35\3\0"+
    "\1\35\12\0\1\35\11\0\2\35\5\0\4\35\1\347"+
    "\24\35\3\0\1\35\12\0\1\35\11\0\2\35\5\0"+
    "\3\35\1\350\25\35\3\0\1\35\12\0\1\35\11\0"+
    "\2\35\5\0\1\351\30\35\3\0\1\35\36\0\1\352"+
    "\43\0\1\35\11\0\2\35\5\0\13\35\1\353\15\35"+
    "\3\0\1\35\46\0\1\354\67\0\1\355\2\0\1\356"+
    "\55\0\1\357\103\0\1\360\71\0\1\361\51\0\1\362"+
    "\65\0\1\363\36\0\2\152\1\0\7\152\1\257\4\152"+
    "\1\364\50\152\11\157\1\4\1\261\55\157\6\0\1\35"+
    "\11\0\2\35\5\0\20\35\1\365\10\35\3\0\1\35"+
    "\53\0\1\366\26\0\1\35\11\0\2\35\5\0\4\35"+
    "\1\367\24\35\3\0\1\35\12\0\1\35\11\0\2\35"+
    "\5\0\12\35\1\370\16\35\3\0\1\35\3\0\1\371"+
    "\6\0\1\35\11\0\2\35\5\0\2\35\1\372\26\35"+
    "\3\0\1\35\12\0\1\35\11\0\2\35\5\0\7\35"+
    "\1\373\21\35\3\0\1\35\12\0\1\35\11\0\2\35"+
    "\5\0\21\35\1\374\7\35\3\0\1\35\2\0\1\375"+
    "\51\0\1\375\15\0\1\375\7\0\1\35\11\0\2\35"+
    "\5\0\22\35\1\376\6\35\3\0\1\35\12\0\1\35"+
    "\11\0\2\35\5\0\10\35\1\377\20\35\3\0\1\35"+
    "\1\0\1\u0100\53\0\1\u0101\24\0\1\35\11\0\2\35"+
    "\5\0\23\35\1\u0102\5\35\3\0\1\35\12\0\1\35"+
    "\11\0\2\35\5\0\13\35\1\u0103\15\35\3\0\1\35"+
    "\12\0\1\35\11\0\2\35\5\0\15\35\1\u0104\13\35"+
    "\3\0\1\35\12\0\1\35\11\0\2\35\5\0\4\35"+
    "\1\u0105\24\35\3\0\1\35\37\0\1\u0106\42\0\1\35"+
    "\11\0\2\35\5\0\13\35\1\u0107\15\35\3\0\1\35"+
    "\12\0\1\35\11\0\2\35\5\0\22\35\1\u0108\6\35"+
    "\3\0\1\35\46\0\1\u0109\33\0\1\35\11\0\2\35"+
    "\5\0\4\35\1\u010a\24\35\3\0\1\35\12\0\1\35"+
    "\11\0\2\35\5\0\20\35\1\u010b\10\35\3\0\1\35"+
    "\12\0\1\35\11\0\2\35\5\0\1\u010c\30\35\3\0"+
    "\1\35\12\0\1\35\11\0\2\35\5\0\10\35\1\u010d"+
    "\7\35\1\u010e\10\35\3\0\1\35\1\0\1\u010f\31\0"+
    "\1\u0110\46\0\1\35\11\0\2\35\5\0\24\35\1\u0111"+
    "\4\35\3\0\1\35\57\0\1\u0112\22\0\1\35\11\0"+
    "\2\35\5\0\1\u0113\30\35\3\0\1\35\33\0\1\u0114"+
    "\46\0\1\35\11\0\2\35\5\0\1\u0115\30\35\3\0"+
    "\1\35\12\0\1\35\11\0\2\35\5\0\20\35\1\u0116"+
    "\10\35\3\0\1\35\12\0\1\35\11\0\2\35\5\0"+
    "\4\35\1\u0117\24\35\3\0\1\35\33\0\1\u0118\46\0"+
    "\1\35\11\0\2\35\5\0\10\35\1\u0119\20\35\3\0"+
    "\1\35\1\0\1\u011a\10\0\1\35\11\0\2\35\5\0"+
    "\20\35\1\u011b\10\35\3\0\1\35\12\0\1\35\11\0"+
    "\2\35\5\0\22\35\1\u011c\6\35\3\0\1\35\12\0"+
    "\1\35\11\0\2\35\5\0\10\35\1\u011d\20\35\3\0"+
    "\1\35\1\0\1\u011e\10\0\1\35\11\0\2\35\5\0"+
    "\20\35\1\u011f\10\35\3\0\1\35\12\0\1\35\11\0"+
    "\2\35\5\0\2\35\1\u0120\26\35\3\0\1\35\35\0"+
    "\1\u0121\44\0\1\35\11\0\2\35\5\0\7\35\1\u0122"+
    "\21\35\3\0\1\35\12\0\1\35\11\0\2\35\5\0"+
    "\25\35\1\u0123\3\35\3\0\1\35\12\0\1\35\11\0"+
    "\2\35\5\0\21\35\1\u0124\7\35\3\0\1\35\2\0"+
    "\1\u0125\7\0\1\35\11\0\2\35\5\0\22\35\1\u0126"+
    "\6\35\3\0\1\35\12\0\1\35\11\0\2\35\5\0"+
    "\4\35\1\u0127\24\35\3\0\1\35\37\0\1\u0128\67\0"+
    "\1\u0129\103\0\1\u012a\57\0\1\u010f\7\0\1\u012b\15\0"+
    "\1\u010f\53\0\1\u012c\55\0\1\u011e\25\0\1\u011e\51\0"+
    "\1\u012d\56\0\1\u012e\31\0\2\152\1\0\7\152\1\150"+
    "\4\152\1\364\50\152\6\0\1\35\11\0\2\35\5\0"+
    "\1\u012f\30\35\3\0\1\35\33\0\1\u0130\46\0\1\35"+
    "\11\0\2\35\5\0\1\u0131\30\35\3\0\1\35\12\0"+
    "\1\35\11\0\2\35\5\0\22\35\1\u0132\6\35\3\0"+
    "\1\35\12\0\1\35\11\0\2\35\5\0\15\35\1\u0133"+
    "\13\35\3\0\1\35\50\0\1\u0134\31\0\1\35\11\0"+
    "\2\35\5\0\13\35\1\u0135\15\35\3\0\1\35\12\0"+
    "\1\35\11\0\2\35\5\0\4\35\1\u0136\24\35\3\0"+
    "\1\35\12\0\1\35\11\0\2\35\5\0\3\35\1\u0137"+
    "\25\35\3\0\1\35\12\0\1\35\11\0\2\35\5\0"+
    "\13\35\1\u0138\15\35\3\0\1\35\46\0\1\u0139\33\0"+
    "\1\35\11\0\2\35\5\0\14\35\1\u013a\14\35\3\0"+
    "\1\35\12\0\1\35\11\0\2\35\5\0\22\35\1\u013b"+
    "\6\35\3\0\1\35\12\0\1\35\11\0\2\35\5\0"+
    "\15\35\1\u013c\13\35\3\0\1\35\12\0\1\35\11\0"+
    "\2\35\5\0\20\35\1\u013d\10\35\3\0\1\35\12\0"+
    "\1\35\11\0\2\35\5\0\5\35\1\u013e\23\35\3\0"+
    "\1\35\53\0\1\u013f\64\0\1\u0140\31\0\1\35\11\0"+
    "\2\35\5\0\4\35\1\u0141\24\35\3\0\1\35\37\0"+
    "\1\u0142\42\0\1\35\11\0\2\35\5\0\6\35\1\u0143"+
    "\22\35\3\0\1\35\41\0\1\u0144\40\0\1\35\11\0"+
    "\2\35\5\0\22\35\1\u0145\6\35\3\0\1\35\12\0"+
    "\1\35\11\0\2\35\5\0\1\u0146\30\35\3\0\1\35"+
    "\12\0\1\35\11\0\2\35\5\0\2\35\1\u0147\26\35"+
    "\3\0\1\35\55\0\1\u0148\24\0\1\35\11\0\2\35"+
    "\5\0\2\35\1\u0149\26\35\3\0\1\35\35\0\1\u014a"+
    "\44\0\1\35\11\0\2\35\5\0\15\35\1\u014b\13\35"+
    "\3\0\1\35\12\0\1\35\11\0\2\35\5\0\2\35"+
    "\1\u014c\26\35\3\0\1\35\35\0\1\u014d\44\0\1\35"+
    "\11\0\2\35\5\0\7\35\1\u014e\21\35\3\0\1\35"+
    "\42\0\1\u014f\37\0\1\35\11\0\2\35\5\0\20\35"+
    "\1\u0150\10\35\3\0\1\35\12\0\1\35\11\0\2\35"+
    "\5\0\21\35\1\u0151\7\35\3\0\1\35\2\0\1\u0152"+
    "\7\0\1\35\11\0\2\35\5\0\10\35\1\u0153\20\35"+
    "\3\0\1\35\1\0\1\u0154\41\0\1\u0154\25\0\1\u0154"+
    "\10\0\1\35\11\0\2\35\5\0\10\35\1\u0155\20\35"+
    "\3\0\1\35\1\0\1\u0156\45\0\1\u0157\75\0\1\u0158"+
    "\52\0\1\u0159\102\0\1\u015a\26\0\1\35\11\0\2\35"+
    "\5\0\2\35\1\u015b\26\35\3\0\1\35\35\0\1\u015c"+
    "\44\0\1\35\11\0\2\35\5\0\15\35\1\u015d\13\35"+
    "\3\0\1\35\12\0\1\35\11\0\2\35\5\0\4\35"+
    "\1\u015e\24\35\3\0\1\35\12\0\1\35\11\0\2\35"+
    "\5\0\23\35\1\u015f\5\35\3\0\1\35\56\0\1\u0160"+
    "\23\0\1\35\11\0\2\35\5\0\22\35\1\u0161\6\35"+
    "\3\0\1\35\12\0\1\35\11\0\2\35\5\0\21\35"+
    "\1\u0162\7\35\3\0\1\35\2\0\1\u0163\7\0\1\35"+
    "\11\0\2\35\5\0\27\35\1\u0164\1\35\3\0\1\35"+
    "\62\0\1\u0165\17\0\1\35\11\0\2\35\5\0\4\35"+
    "\1\u0166\24\35\3\0\1\35\12\0\1\35\11\0\2\35"+
    "\5\0\2\35\1\u0167\26\35\3\0\1\35\12\0\1\35"+
    "\11\0\2\35\5\0\16\35\1\333\12\35\3\0\1\35"+
    "\12\0\1\35\11\0\2\35\5\0\1\u0168\30\35\3\0"+
    "\1\35\51\0\1\u0169\53\0\1\u016a\44\0\1\35\11\0"+
    "\2\35\5\0\4\35\1\u016b\24\35\3\0\1\35\37\0"+
    "\1\u016c\42\0\1\35\11\0\2\35\5\0\4\35\1\u016d"+
    "\24\35\3\0\1\35\12\0\1\35\11\0\2\35\5\0"+
    "\14\35\1\u016e\14\35\3\0\1\35\12\0\1\35\11\0"+
    "\2\35\5\0\22\35\1\u016f\6\35\3\0\1\35\37\0"+
    "\1\u0170\42\0\1\35\11\0\2\35\5\0\16\35\1\u0171"+
    "\12\35\3\0\1\35\12\0\1\35\11\0\2\35\5\0"+
    "\4\35\1\u0172\24\35\3\0\1\35\37\0\1\u0173\42\0"+
    "\1\35\11\0\2\35\5\0\13\35\1\u0174\15\35\3\0"+
    "\1\35\46\0\1\u0175\60\0\1\u0176\63\0\1\u0177\105\0"+
    "\1\u0178\30\0\1\35\11\0\2\35\5\0\22\35\1\u0179"+
    "\6\35\3\0\1\35\55\0\1\u017a\24\0\1\35\11\0"+
    "\2\35\5\0\20\35\1\u017b\10\35\3\0\1\35\12\0"+
    "\1\35\11\0\2\35\5\0\4\35\1\u017c\24\35\3\0"+
    "\1\35\37\0\1\u017d\42\0\1\35\11\0\2\35\5\0"+
    "\15\35\1\u017e\13\35\3\0\1\35\12\0\1\35\11\0"+
    "\2\35\5\0\4\35\1\u017f\24\35\3\0\1\35\12\0"+
    "\1\35\11\0\2\35\5\0\2\35\1\u0180\26\35\3\0"+
    "\1\35\37\0\1\u0181\42\0\1\35\11\0\2\35\5\0"+
    "\1\u0182\30\35\3\0\1\35\12\0\1\35\11\0\2\35"+
    "\5\0\4\35\1\u0183\24\35\3\0\1\35\12\0\1\35"+
    "\11\0\2\35\5\0\15\35\1\u0184\13\35\3\0\1\35"+
    "\12\0\1\35\11\0\2\35\5\0\15\35\1\u0185\13\35"+
    "\3\0\1\35\50\0\1\u0186\31\0\1\35\11\0\2\35"+
    "\5\0\4\35\1\u0187\24\35\3\0\1\35\37\0\1\u0188"+
    "\100\0\1\u0189\54\0\1\u018a\102\0\1\u018b\31\0\1\35"+
    "\11\0\2\35\5\0\4\35\1\u018c\24\35\3\0\1\35"+
    "\12\0\1\35\11\0\2\35\5\0\22\35\1\u018d\6\35"+
    "\3\0\1\35\12\0\1\35\11\0\2\35\5\0\16\35"+
    "\1\u018e\12\35\3\0\1\35\12\0\1\35\11\0\2\35"+
    "\5\0\4\35\1\u018f\24\35\3\0\1\35\51\0\1\u0190"+
    "\30\0\1\35\11\0\2\35\5\0\3\35\1\u0191\25\35"+
    "\3\0\1\35\12\0\1\35\11\0\2\35\5\0\10\35"+
    "\1\u0192\20\35\3\0\1\35\1\0\1\u0193\10\0\1\35"+
    "\11\0\2\35\5\0\22\35\1\u0194\6\35\3\0\1\35"+
    "\55\0\1\u0195\67\0\1\u0196\51\0\1\u0197\73\0\1\u0193"+
    "\25\0\1\u0193\10\0\1\35\11\0\2\35\5\0\21\35"+
    "\1\333\7\35\3\0\1\35\2\0\1\u0169\7\0\1\35"+
    "\11\0\2\35\5\0\21\35\1\u0198\7\35\3\0\1\35"+
    "\2\0\1\u0199\7\0\1\35\11\0\2\35\5\0\5\35"+
    "\1\u019a\23\35\3\0\1\35\40\0\1\u019b\41\0\1\35"+
    "\11\0\2\35\5\0\30\35\1\u019c\3\0\1\35\63\0"+
    "\1\u019d\60\0\1\u0199\15\0\1\u0199\7\0\1\35\11\0"+
    "\2\35\5\0\4\35\1\u019e\24\35\3\0\1\35\37\0"+
    "\1\u019f\42\0\1\35\11\0\2\35\5\0\3\35\1\u01a0"+
    "\25\35\3\0\1\35\36\0\1\u01a1\35\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17752];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\11\1\1\1\11\1\1\6\11\3\1"+
    "\2\11\1\1\1\11\22\1\2\11\1\0\1\1\2\0"+
    "\4\1\1\0\1\11\1\1\1\0\3\11\20\1\1\0"+
    "\24\1\1\0\1\1\1\11\7\0\10\1\2\0\1\11"+
    "\2\1\1\0\6\1\1\0\6\1\1\0\5\1\1\0"+
    "\4\1\1\0\6\1\1\0\7\1\1\0\3\1\1\0"+
    "\5\1\1\0\1\1\2\0\1\1\4\0\2\1\1\0"+
    "\1\1\1\0\6\1\1\11\2\1\1\0\2\1\1\0"+
    "\3\1\1\11\2\1\1\0\2\1\1\0\5\1\1\0"+
    "\2\1\1\0\1\1\1\0\3\1\1\0\7\1\1\0"+
    "\2\1\1\11\5\1\1\11\1\1\10\0\2\1\1\0"+
    "\2\1\1\11\3\1\1\11\2\1\1\0\1\11\4\1"+
    "\1\11\10\1\2\0\1\1\1\0\1\1\1\0\3\1"+
    "\1\0\1\1\1\0\3\1\1\0\2\1\1\0\3\1"+
    "\1\0\2\1\1\11\3\0\2\11\1\0\1\1\1\0"+
    "\3\1\1\0\4\1\1\0\5\1\2\0\1\1\1\11"+
    "\1\1\1\0\3\1\1\0\1\1\1\11\2\1\1\11"+
    "\1\1\1\11\2\1\1\11\1\1\1\0\1\1\2\0"+
    "\1\11\2\0\1\1\1\0\3\1\1\0\2\1\1\11"+
    "\1\1\1\11\3\1\1\11\1\0\1\1\1\11\3\1"+
    "\1\11\2\1\1\0\1\1\4\0\1\1\1\11\2\1"+
    "\1\11\3\1\1\0\4\1\1\0\1\1\1\11\3\0"+
    "\4\1\1\0\2\1\1\0\1\1\1\11\1\0\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\0\1\1\1\0"+
    "\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[417];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  private int comment_count = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }
  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Yytoken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [141] { /* Ignore characters within a line comment. */ }");
            { /* Ignore characters within a line comment. */
            }
            // fall through
          case 82: break;
          case 2:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [70] {  }");
            { 
            }
            // fall through
          case 83: break;
          case 3:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [68] { return (new Yytoken(yytext(),yyline,\"TKN_eComercial\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_eComercial"));
            }
            // fall through
          case 84: break;
          case 4:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [53] { return (new Yytoken(yytext(),yyline,\"TKN_abreParenteses\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_abreParenteses"));
            }
            // fall through
          case 85: break;
          case 5:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [54] { return (new Yytoken(yytext(),yyline,\"TKN_fechaParenteses\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_fechaParenteses"));
            }
            // fall through
          case 86: break;
          case 6:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [60] { return (new Yytoken(yytext(),yyline,\"TKN_asterisco\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_asterisco"));
            }
            // fall through
          case 87: break;
          case 7:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [58] { return (new Yytoken(yytext(),yyline,\"TKN_mais\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_mais"));
            }
            // fall through
          case 88: break;
          case 8:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [50] { return (new Yytoken(yytext(),yyline,\"TKN_virgula\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_virgula"));
            }
            // fall through
          case 89: break;
          case 9:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [59] { return (new Yytoken(yytext(),yyline,\"TKN_hifen\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_hifen"));
            }
            // fall through
          case 90: break;
          case 10:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [57] { return (new Yytoken(yytext(),yyline,\"TKN_ponto\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_ponto"));
            }
            // fall through
          case 91: break;
          case 11:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [61] { return (new Yytoken(yytext(),yyline,\"TKN_barra\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_barra"));
            }
            // fall through
          case 92: break;
          case 12:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [127] { return (new Yytoken(yytext(),yyline,\"TKN_tipoInteiro\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_tipoInteiro"));
            }
            // fall through
          case 93: break;
          case 13:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [51] { return (new Yytoken(yytext(),yyline,\"TKN_doisPontos\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_doisPontos"));
            }
            // fall through
          case 94: break;
          case 14:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [52] { return (new Yytoken(yytext(),yyline,\"TKN_pontoEvirgula\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_pontoEvirgula"));
            }
            // fall through
          case 95: break;
          case 15:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [64] { return (new Yytoken(yytext(),yyline,\"TKN_menor\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_menor"));
            }
            // fall through
          case 96: break;
          case 16:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [62] { return (new Yytoken(yytext(),yyline,\"TKN_igual\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_igual"));
            }
            // fall through
          case 97: break;
          case 17:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [66] { return (new Yytoken(yytext(),yyline,\"TKN_maior\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_maior"));
            }
            // fall through
          case 98: break;
          case 18:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [126] { return (new Yytoken(yytext(),yyline,\"TKN_identificador\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_identificador"));
            }
            // fall through
          case 99: break;
          case 19:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [55] { return (new Yytoken(yytext(),yyline,\"TKN_abreColchetes\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_abreColchetes"));
            }
            // fall through
          case 100: break;
          case 20:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [56] { return (new Yytoken(yytext(),yyline,\"TKN_fechaColchetes\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_fechaColchetes"));
            }
            // fall through
          case 101: break;
          case 21:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [69] { return (new Yytoken(yytext(),yyline,\"TKN_barraVertical\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_barraVertical"));
            }
            // fall through
          case 102: break;
          case 22:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [142] { yybegin(YYINITIAL); }");
            { yybegin(YYINITIAL);
            }
            // fall through
          case 103: break;
          case 23:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [145] { yybegin(COMMENT); }");
            { yybegin(COMMENT);
            }
            // fall through
          case 104: break;
          case 24:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [65] { return (new Yytoken(yytext(),yyline,\"TKN_menorOuIgual\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_menorOuIgual"));
            }
            // fall through
          case 105: break;
          case 25:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [63] { return (new Yytoken(yytext(),yyline,\"TKN_diferente\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_diferente"));
            }
            // fall through
          case 106: break;
          case 26:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [67] { return (new Yytoken(yytext(),yyline,\"TKN_maiorOuIgual\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_maiorOuIgual"));
            }
            // fall through
          case 107: break;
          case 27:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [87] { return (new Yytoken(yytext(), yyline, \"TKN_do\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_do"));
            }
            // fall through
          case 108: break;
          case 28:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [96] { return (new Yytoken(yytext(), yyline, \"TKN_if\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_if"));
            }
            // fall through
          case 109: break;
          case 29:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [147] { /* Ignore characters within a block comment. */ }");
            { /* Ignore characters within a block comment. */
            }
            // fall through
          case 110: break;
          case 30:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [135] { if (--comment_count == 0) yybegin(YYINITIAL); }");
            { if (--comment_count == 0) yybegin(YYINITIAL);
            }
            // fall through
          case 111: break;
          case 31:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [134] { comment_count++; }");
            { comment_count++;
            }
            // fall through
          case 112: break;
          case 32:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [129] { return (new Yytoken(yytext(),yyline,\"TKN_tipoReal\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_tipoReal"));
            }
            // fall through
          case 113: break;
          case 33:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [94] { return (new Yytoken(yytext(), yyline, \"TKN_for\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_for"));
            }
            // fall through
          case 114: break;
          case 34:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [100] { return (new Yytoken(yytext(), yyline, \"TKN_int\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_int"));
            }
            // fall through
          case 115: break;
          case 35:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [104] { return (new Yytoken(yytext(), yyline, \"TKN_new\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_new"));
            }
            // fall through
          case 116: break;
          case 36:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [119] { return (new Yytoken(yytext(), yyline, \"TKN_try\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_try"));
            }
            // fall through
          case 117: break;
          case 37:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [79] { return (new Yytoken(yytext(), yyline, \"TKN_byte\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_byte"));
            }
            // fall through
          case 118: break;
          case 38:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [80] { return (new Yytoken(yytext(), yyline, \"TKN_case\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_case"));
            }
            // fall through
          case 119: break;
          case 39:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [82] { return (new Yytoken(yytext(), yyline, \"TKN_char\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_char"));
            }
            // fall through
          case 120: break;
          case 40:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [89] { return (new Yytoken(yytext(), yyline, \"TKN_else\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_else"));
            }
            // fall through
          case 121: break;
          case 41:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [95] { return (new Yytoken(yytext(), yyline, \"TKN_goto\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_goto"));
            }
            // fall through
          case 122: break;
          case 42:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [102] { return (new Yytoken(yytext(), yyline, \"TKN_long\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_long"));
            }
            // fall through
          case 123: break;
          case 43:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [125] { return (new Yytoken(yytext(),yyline,\"TKN_tipoVariavel\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_tipoVariavel"));
            }
            // fall through
          case 124: break;
          case 44:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [115] { return (new Yytoken(yytext(), yyline, \"TKN_this\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_this"));
            }
            // fall through
          case 125: break;
          case 45:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [74] { return (new Yytoken(yytext(), yyline, \"TKN_true\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_true"));
            }
            // fall through
          case 126: break;
          case 46:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [120] { return (new Yytoken(yytext(), yyline, \"TKN_void\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_void"));
            }
            // fall through
          case 127: break;
          case 47:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [78] { return (new Yytoken(yytext(), yyline, \"TKN_break\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_break"));
            }
            // fall through
          case 128: break;
          case 48:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [81] { return (new Yytoken(yytext(), yyline, \"TKN_catch\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_catch"));
            }
            // fall through
          case 129: break;
          case 49:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [83] { return (new Yytoken(yytext(), yyline, \"TKN_class\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_class"));
            }
            // fall through
          case 130: break;
          case 50:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [84] { return (new Yytoken(yytext(), yyline, \"TKN_const\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_const"));
            }
            // fall through
          case 131: break;
          case 51:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [75] { return (new Yytoken(yytext(), yyline, \"TKN_false\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_false"));
            }
            // fall through
          case 132: break;
          case 52:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [91] { return (new Yytoken(yytext(), yyline, \"TKN_final\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_final"));
            }
            // fall through
          case 133: break;
          case 53:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [93] { return (new Yytoken(yytext(), yyline, \"TKN_float\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_float"));
            }
            // fall through
          case 134: break;
          case 54:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [110] { return (new Yytoken(yytext(), yyline, \"TKN_short\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_short"));
            }
            // fall through
          case 135: break;
          case 55:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [112] { return (new Yytoken(yytext(), yyline, \"TKN_super\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_super"));
            }
            // fall through
          case 136: break;
          case 56:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [116] { return (new Yytoken(yytext(), yyline, \"TKN_throw\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_throw"));
            }
            // fall through
          case 137: break;
          case 57:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [122] { return (new Yytoken(yytext(), yyline, \"TKN_while\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_while"));
            }
            // fall through
          case 138: break;
          case 58:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [88] { return (new Yytoken(yytext(), yyline, \"TKN_double\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_double"));
            }
            // fall through
          case 139: break;
          case 59:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [98] { return (new Yytoken(yytext(), yyline, \"TKN_import\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_import"));
            }
            // fall through
          case 140: break;
          case 60:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [103] { return (new Yytoken(yytext(), yyline, \"TKN_native\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_native"));
            }
            // fall through
          case 141: break;
          case 61:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [108] { return (new Yytoken(yytext(), yyline, \"TKN_public\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_public"));
            }
            // fall through
          case 142: break;
          case 62:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [109] { return (new Yytoken(yytext(), yyline, \"TKN_return\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_return"));
            }
            // fall through
          case 143: break;
          case 63:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [111] { return (new Yytoken(yytext(), yyline, \"TKN_static\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_static"));
            }
            // fall through
          case 144: break;
          case 64:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [113] { return (new Yytoken(yytext(), yyline, \"TKN_switch\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_switch"));
            }
            // fall through
          case 145: break;
          case 65:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [117] { return (new Yytoken(yytext(), yyline, \"TKN_throws\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_throws"));
            }
            // fall through
          case 146: break;
          case 66:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [77] { return (new Yytoken(yytext(), yyline, \"TKN_boolean\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_boolean"));
            }
            // fall through
          case 147: break;
          case 67:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [86] { return (new Yytoken(yytext(), yyline, \"TKN_default\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_default"));
            }
            // fall through
          case 148: break;
          case 68:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [90] { return (new Yytoken(yytext(), yyline, \"TKN_extends\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_extends"));
            }
            // fall through
          case 149: break;
          case 69:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [92] { return (new Yytoken(yytext(), yyline, \"TKN_finally\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_finally"));
            }
            // fall through
          case 150: break;
          case 70:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [105] { return (new Yytoken(yytext(), yyline, \"TKN_package\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_package"));
            }
            // fall through
          case 151: break;
          case 71:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [106] { return (new Yytoken(yytext(), yyline, \"TKN_private\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_private"));
            }
            // fall through
          case 152: break;
          case 72:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [76] { return (new Yytoken(yytext(), yyline, \"TKN_abstract\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_abstract"));
            }
            // fall through
          case 153: break;
          case 73:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [85] { return (new Yytoken(yytext(), yyline, \"TKN_continue\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_continue"));
            }
            // fall through
          case 154: break;
          case 74:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [124] { return (new Yytoken(yytext(),yyline,\"TKN_nomeiaPrograma\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_nomeiaPrograma"));
            }
            // fall through
          case 155: break;
          case 75:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [121] { return (new Yytoken(yytext(), yyline, \"TKN_volatile\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_volatile"));
            }
            // fall through
          case 156: break;
          case 76:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [101] { return (new Yytoken(yytext(), yyline, \"TKN_interface\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_interface"));
            }
            // fall through
          case 157: break;
          case 77:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [107] { return (new Yytoken(yytext(), yyline, \"TKN_protected\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_protected"));
            }
            // fall through
          case 158: break;
          case 78:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [118] { return (new Yytoken(yytext(), yyline, \"TKN_transient\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_transient"));
            }
            // fall through
          case 159: break;
          case 79:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [97] { return (new Yytoken(yytext(), yyline, \"TKN_implements\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_implements"));
            }
            // fall through
          case 160: break;
          case 80:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [99] { return (new Yytoken(yytext(), yyline, \"TKN_instanceof\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_instanceof"));
            }
            // fall through
          case 161: break;
          case 81:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [114] { return (new Yytoken(yytext(), yyline, \"TKN_synchronized\")); }");
            { return (new Yytoken(yytext(), yyline, "TKN_synchronized"));
            }
            // fall through
          case 162: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Yylex [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Yylex scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Yylex(reader);
          do {
            System.out.println(scanner.yylex());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
